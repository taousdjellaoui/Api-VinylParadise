{
	"info": {
		"_postman_id": "c72b1613-b8b2-4b49-9f30-e3320d134689",
		"name": "Collection Vinyl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37982647",
		"_collection_link": "https://service-dechange.postman.co/workspace/API-VinylParadise~423efa48-05b8-418e-909c-8f65f840a58f/collection/37982647-c72b1613-b8b2-4b49-9f30-e3320d134689?action=share&source=collection_link&creator=37982647"
	},
	"item": [
		{
			"name": "Dan Davis admin",
			"item": [
				{
					"name": "Étant donné que je veux récupérer tous les vinyls, lorsque j'envoie une requête GET, alors je reçois une liste de vinyls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl par ID, lorsque j'envoie une requête GET, alors je reçois les détails du vinyl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('album');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl avec un ID inexistant (500), lorsque j'envoie une requête GET, alors je reçois une erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/500",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID 1, lorsque je mets à jour les détails, alors le vinyle est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.prix).to.equal(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID innexistant 400, lorsque je mets à jour les détails, alorson recoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID 61, lorsque je le supprime, alors il n'est plus disponible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/66",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"66"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID inexistant 400, lorsque je le supprime, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux ajouter un nouveau vinyl, lorsque j'envoie une requête POST avec les détails du vinyl, alors le vinyl est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('utilisateur');",
									"    pm.expect(jsonData.utilisateur.nom).to.equal('do');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \n        \"utilisateur\": {\n            \"nom\": \"do\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 30,\n        \"description\": \"Vinyle classique de Frank Zappa.\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenName",
						"value": "Dan David Token",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{URLAcess}}",
						"type": "string"
					},
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "audience",
								"value": "{{audience}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "{{mdp}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username Dan David}}",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClienID}}",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Clark Kent Utilisateur",
			"item": [
				{
					"name": "Étant donné que je veux récupérer tous les vinyls, lorsque j'envoie une requête GET, alors je reçois une liste de vinyls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl par ID, lorsque j'envoie une requête GET, alors je reçois les détails du vinyl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('album');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl avec un ID inexistant (500), lorsque j'envoie une requête GET, alors je reçois une erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/500",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID 1, lorsque je mets à jour les détails, alors le vinyle est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.prix).to.equal(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID innexistant 400, lorsque je mets à jour les détails, alorson recoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID 61, lorsque je le supprime, alors il n'est plus disponible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/66",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"66"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID inexistant 400, lorsque je le supprime, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux ajouter un nouveau vinyl, lorsque j'envoie une requête POST avec les détails du vinyl, alors le vinyl est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('utilisateur');",
									"    pm.expect(jsonData.utilisateur.nom).to.equal('do');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \n        \"utilisateur\": {\n            \"nom\": \"do\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 30,\n        \"description\": \"Vinyle classique de Frank Zappa.\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "audience",
								"value": "{{audience}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "{{mdp}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{username Clark Kent}}",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClienID}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{URLAcess}}",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Clark Kent Token",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Sarah Smith",
			"item": [
				{
					"name": "Étant donné que je veux récupérer tous les vinyls, lorsque j'envoie une requête GET, alors je reçois une liste de vinyls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl par ID, lorsque j'envoie une requête GET, alors je reçois les détails du vinyl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('album');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl avec un ID inexistant (500), lorsque j'envoie une requête GET, alors je reçois une erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/500",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID 1, lorsque je mets à jour les détails, alors le vinyle est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.prix).to.equal(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID innexistant 400, lorsque je mets à jour les détails, alorson recoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID 61, lorsque je le supprime, alors il n'est plus disponible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/66",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"66"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID inexistant 400, lorsque je le supprime, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux ajouter un nouveau vinyl, lorsque j'envoie une requête POST avec les détails du vinyl, alors le vinyl est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('utilisateur');",
									"    pm.expect(jsonData.utilisateur.nom).to.equal('do');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \n        \"utilisateur\": {\n            \"nom\": \"do\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 30,\n        \"description\": \"Vinyle classique de Frank Zappa.\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "audience",
								"value": "{{audience}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "",
						"type": "string"
					},
					{
						"key": "username",
						"value": "sarah.smith@example.com",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClienID}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{URLAcess}}",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Sarah token",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Daniel Radcliff",
			"item": [
				{
					"name": "Étant donné que je veux récupérer tous les vinyls, lorsque j'envoie une requête GET, alors je reçois une liste de vinyls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl par ID, lorsque j'envoie une requête GET, alors je reçois les détails du vinyl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('album');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux récupérer un vinyl avec un ID inexistant (500), lorsque j'envoie une requête GET, alors je reçois une erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-match-request-body",
								"value": "true",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls/500",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID 1, lorsque je mets à jour les détails, alors le vinyle est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.prix).to.equal(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux modifier un vinyle avec l'ID innexistant 400, lorsque je mets à jour les détails, alorson recoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"utilisateur\": {\n            \"nom\": \"John\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 3000,\n        \"description\": \"Vinyle classique de Frank Zappa modifier\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID 61, lorsque je le supprime, alors il n'est plus disponible",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/66",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"66"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux supprimer un vinyle avec l'ID inexistant 400, lorsque je le supprime, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Ressource introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/vinyls/400",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls",
								"400"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je veux ajouter un nouveau vinyl, lorsque j'envoie une requête POST avec les détails du vinyl, alors le vinyl est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new vinyl details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('utilisateur');",
									"    pm.expect(jsonData.utilisateur.nom).to.equal('do');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \n        \"utilisateur\": {\n            \"nom\": \"do\",\n            \"prenom\": \"Doe\",\n            \"email\": \"john@example.com\"\n        },\n        \"album\": {\n            \"id\": 1,\n            \"titre\": \"Uncle Meat\",\n            \"artist\": {\n                \"id\": 1,\n                \"nom\": \"Frank Zappa\"\n            },\n            \"genres\": [\n                {\n                    \"id\": 5,\n                    \"nom\": \"Rock\"\n                }\n            ],\n            \"dateDeSortie\": \"1969-04-21\",\n            \"image_url\": \"https://m.media-amazon.com/images/I/814xThDx75L._AC_UL480_.jpg\"\n        },\n        \"prix\": 30,\n        \"description\": \"Vinyle classique de Frank Zappa.\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "audience",
								"value": "{{audience}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "",
						"type": "string"
					},
					{
						"key": "username",
						"value": "sarah.smith@example.com",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{ClientSecret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{ClienID}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{URLAcess}}",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Sarah token",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adresse API",
			"value": "idefix.dti.crosemont.quebec:9056",
			"type": "string"
		},
		{
			"key": "URLAcess",
			"value": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
			"type": "string"
		},
		{
			"key": "ClienID",
			"value": "p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L",
			"type": "string"
		},
		{
			"key": "ClientSecret",
			"value": "8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt",
			"type": "string"
		},
		{
			"key": "audience",
			"value": "https://vinylParadiseAPI.ca",
			"type": "string"
		},
		{
			"key": "username Dan David",
			"value": "david.dan@example.com",
			"type": "string"
		},
		{
			"key": "username Clark Kent",
			"value": "clark.kent@example.com",
			"type": "string"
		},
		{
			"key": "useranme Sarah Smith",
			"value": "sarah.smith@example.com",
			"type": "string"
		},
		{
			"key": "mdp",
			"value": "YudasTaousKindy-",
			"type": "string"
		}
	]
}