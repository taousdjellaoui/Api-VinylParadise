{
	"info": {
		"_postman_id": "0ae50e2a-d73a-4e72-aa84-3a6c76d256e1",
		"name": "Collection Utilisateur",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37982647",
		"_collection_link": "https://service-dechange.postman.co/workspace/API-VinylParadise~423efa48-05b8-418e-909c-8f65f840a58f/collection/37982881-0ae50e2a-d73a-4e72-aa84-3a6c76d256e1?action=share&source=collection_link&creator=37982647"
	},
	"item": [
		{
			"name": "Dan Davis Admin",
			"item": [
				{
					"name": "Étant donné que des utilisateurs existent, lorsque je récupère tous les utilisateurs, alors je reçois la liste des utilisateurs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "Bearer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/vinyls",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"vinyls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois une liste d'utilisateurs correspondants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData[0].nom).to.equal('Emily');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Emily",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Emily"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois un code de retour 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Doe",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Doe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur inexistant , alors on reçoit un code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.erreur).to.equal('Resource Existant');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Baba\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bl@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur existant , alors l'utilisateur est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.nom).to.equal('bobo');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"bobo\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email Bl@gmail.com, lorsque je fournis les nouvelles données, alors cet utilisateur est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nom).to.equal('Bibi');",
									"    pm.expect(jsonData.prenom).to.equal('Li');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bl@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bl@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email inexistant Blooo@gmail.com, lorsque je fournis les nouvelles données, alors on reçoit un code d'erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Blooo@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Blooo@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Blooo@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email inexistant 1, lorsque j'envoie une requête DELETE, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"     var jsonData = pm.response.json();",
									"   pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email existant Bol@gmail.com, lorsque j'envoie une requête DELETE, alors l'utilisateur est supprimer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bol@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bol@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_id\": \"p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L\",\r\n  \"client_secret\": \"8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt\",\r\n  \"audience\": \"https://vinylParadiseAPI.ca\", \r\n  \"grant_type\": \"client_credentials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"dev-a57qm4dynql006nr",
								"ca",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth0test",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "password",
						"value": "{{Mdp}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{Username Dan Davis}}",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Dan Davis Token",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{Client Secret}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{Url Acces}}",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{Client Id}}",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Clark Kent Utilisateur",
			"item": [
				{
					"name": "Étant donné que des utilisateurs existent, lorsque je récupère tous les utilisateurs, alors je reçois la liste des utilisateurs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessTokenUrl",
									"value": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L",
									"type": "string"
								},
								{
									"key": "tokenRequestParams",
									"value": [
										{
											"key": "audience",
											"value": "https://vinylParadiseAPI.ca",
											"enabled": true,
											"send_as": "request_body"
										}
									],
									"type": "any"
								},
								{
									"key": "password",
									"value": "YudasTaousKindy-",
									"type": "string"
								},
								{
									"key": "username",
									"value": "david.dan@example.com",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "password_credentials",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "Bearer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois une liste d'utilisateurs correspondants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData[0].nom).to.equal('Emily');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Emily",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Emily"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois un code de retour 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Doe",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Doe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur inexistant , alors on reçoit un code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.erreur).to.equal('Resource Existant');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Baba\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bl@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur existant , alors l'utilisateur est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.nom).to.equal('bobo');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"bobo\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email Bl@gmail.com, lorsque je fournis les nouvelles données, alors cet utilisateur est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nom).to.equal('Bibi');",
									"    pm.expect(jsonData.prenom).to.equal('Li');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bl@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bl@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email inexistant Blooo@gmail.com, lorsque je fournis les nouvelles données, alors on reçoit un code d'erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Blooo@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Blooo@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Blooo@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email inexistant 1, lorsque j'envoie une requête DELETE, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"     var jsonData = pm.response.json();",
									"   pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email existant Bol@gmail.com, lorsque j'envoie une requête DELETE, alors l'utilisateur est supprimer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bol@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bol@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_id\": \"p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L\",\r\n  \"client_secret\": \"8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt\",\r\n  \"audience\": \"https://vinylParadiseAPI.ca\", \r\n  \"grant_type\": \"client_credentials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"dev-a57qm4dynql006nr",
								"ca",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth0test",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "Audience",
								"value": "{{Audiance}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "{{Mdp}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{Username Clark Kent}}",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{Client Secret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{Client Id}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{Url Acces}}",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Clark Kent1 Token",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Sarah Smith",
			"item": [
				{
					"name": "Étant donné que des utilisateurs existent, lorsque je récupère tous les utilisateurs, alors je reçois la liste des utilisateurs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "Bearer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois une liste d'utilisateurs correspondants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData[0].nom).to.equal('Emily');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Emily",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Emily"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je recherche un utilisateur par nom, lorsque je fournis le nom 'Doe', alors je reçois un code de retour 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains matching users\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs?nom=Doe",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							],
							"query": [
								{
									"key": "nom",
									"value": "Doe"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur inexistant , alors on reçoit un code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.erreur).to.equal('Resource Existant');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Baba\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bl@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite ajouter un utilisateur, lorsque je fournis les données d'un l'utilisateur existant , alors l'utilisateur est créé",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains new user details\", function () {",
									"    var jsonData = pm.response.json();",
									"  pm.expect(jsonData.nom).to.equal('bobo');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"bobo\",\n    \"prenom\": \"Lo\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email Bl@gmail.com, lorsque je fournis les nouvelles données, alors cet utilisateur est mis à jour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nom).to.equal('Bibi');",
									"    pm.expect(jsonData.prenom).to.equal('Li');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Bol@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bl@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bl@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite modifier un utilisateur avec le email inexistant Blooo@gmail.com, lorsque je fournis les nouvelles données, alors on reçoit un code d'erreur 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response contains updated user details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Bibi\",\n    \"prenom\": \"Li\",\n    \"email\": \"Blooo@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Blooo@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Blooo@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email inexistant 1, lorsque j'envoie une requête DELETE, alors on reçoit un code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"     var jsonData = pm.response.json();",
									"   pm.expect(jsonData.erreur).to.equal('Utilisateur introuvable');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/1",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Étant donné que je souhaite supprimer un utilisateur avec le email existant Bol@gmail.com, lorsque j'envoie une requête DELETE, alors l'utilisateur est supprimer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.equal('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{adresse API}}/utilisateurs/Bol@gmail.com",
							"host": [
								"{{adresse API}}"
							],
							"path": [
								"utilisateurs",
								"Bol@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"client_id\": \"p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L\",\r\n  \"client_secret\": \"8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt\",\r\n  \"audience\": \"https://vinylParadiseAPI.ca\", \r\n  \"grant_type\": \"client_credentials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"dev-a57qm4dynql006nr",
								"ca",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth0test",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "tokenRequestParams",
						"value": [
							{
								"key": "Audiance",
								"value": "{{Audiance}}",
								"enabled": true,
								"send_as": "request_body"
							}
						],
						"type": "any"
					},
					{
						"key": "password",
						"value": "{{Mdp}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{Username Sarah Smith}}",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "{{Client Secret}}",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{Client Id}}",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{Url Acces}}",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Sarah Smith1 Token",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "password_credentials",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adresse API",
			"value": "idefix.dti.crosemont.quebec:9056",
			"type": "string"
		},
		{
			"key": "Url Acces",
			"value": "https://dev-a57qm4dynql006nr.ca.auth0.com/oauth/token",
			"type": "string"
		},
		{
			"key": "Client Id",
			"value": "p7QWRbypvUskjmO4H85Qzh6HHzM7zt5L",
			"type": "string"
		},
		{
			"key": "Client Secret",
			"value": "8LXzJQA0L0rB_cGBh-G9N5mvE5dr3k-X0bhuJM_bC4OAm8wMkkp7fBeyrcpj6EZt",
			"type": "string"
		},
		{
			"key": "Audiance",
			"value": "https://vinylParadiseAPI.ca",
			"type": "string"
		},
		{
			"key": "Username Dan Davis",
			"value": "david.dan1@example.com",
			"type": "string"
		},
		{
			"key": "Username Clark Kent",
			"value": "clark.kent1@example.com",
			"type": "string"
		},
		{
			"key": "Username Sarah Smith",
			"value": "sarah.smith1@example.com",
			"type": "string"
		},
		{
			"key": "Mdp",
			"value": "YudasTaousKindy-",
			"type": "string"
		}
	]
}